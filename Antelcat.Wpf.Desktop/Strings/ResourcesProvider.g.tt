<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#
    const string xKey = "string.Empty";
    const string className = "Resources";
    const string resourceFileName = "Resources.resx";
    List<string> additionalInterfaces = new()
    {
        "ILanguageManager"
    };
    var interfaces = additionalInterfaces.Count == 0 ? string.Empty : $" : {string.Join(", ", additionalInterfaces)}";
    var propertyNameList = XElement.Load(this.Host.ResolvePath(resourceFileName))
        .Elements("data")
        .Select(item =>
            item.Attribute("name")?
                .Value
                .Replace(' ', '_')
                .Replace('(', '_')
                .Replace(')', '_')
                .Replace('#', '_'))
        .Where(item => item != null).ToList();

    var langDic = new Dictionary<string, string>();
    foreach (var item in propertyNameList)
    {
        langDic[item] =
            @$"/// <summary>
    /// {item}
    /// </summary>";
    }
#>
using System.ComponentModel;
using System.Globalization;
using System.Windows;
using System.Windows.Data;
using Antelcat.Wpf.Interfaces;
#nullable enable

namespace Antelcat.Wpf.Desktop.Strings;

public partial class <#=className#>Provider <#=interfaces#>
{
    public static string X_Key = <#=xKey#>;

    public static <#=className#>Provider Instance 
    { 
        get => instance ??= Application.Current.TryFindResource(X_Key) as <#=className#>Provider ?? new <#=className#>Provider(); 
        private set => instance = value; 
    }
    private static <#=className#>Provider? instance;

    public <#=className#>Provider() => Instance = this; 

    private static string? CultureInfoStr;

    public CultureInfo CurrentCulture { get => Culture!; set => Culture = value; }

    public static CultureInfo? Culture
    {
        get => <#=className#>.Culture;
        set
        {
            if (value == null) return;
            if (Equals(CultureInfoStr, value.EnglishName)) return;
            <#=className#>.Culture = value;
            CultureInfoStr = value.EnglishName;
            Instance.Update<#=className#>s();
        }
    }

    public static string? Get<#=className#>(string key) => <#=className#>.ResourceManager.GetString(key, Culture);

    public static void Set<#=className#>(DependencyObject dependencyObject, DependencyProperty dependencyProperty, string key)
    {
        BindingOperations.SetBinding(dependencyObject, dependencyProperty, new Binding(key)
        {
            Source = Instance,
            Mode = BindingMode.OneWay
        });
    }

	private void Update<#=className#>s()
    {
<#foreach(var item in propertyNameList){#>
		OnPropertyChanged(nameof(<#=item#>));
<#}#>
    }

<#foreach(var item in propertyNameList){#>
    <#=langDic[item]#>
	public string <#=item#> => <#=className#>.<#=item#>;

<#}#>

    public event PropertyChangedEventHandler? PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}

public partial class <#=className#>Keys
{
<#foreach(var item in propertyNameList){#>
    <#=langDic[item]#>
	public static string <#=item#> = nameof(<#=item#>);

<#}#>
}
